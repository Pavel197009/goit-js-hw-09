{"version":3,"file":"2-form.js","sources":["../src/js/2-form.js"],"sourcesContent":["function handleSubmit(event) {\r\n  event.preventDefault();\r\n  const form = event.currentTarget;\r\n  const login = form.elements.email.value;\r\n  const message = form.elements.message.value;\r\n  \r\n  if (login.trim() === \"\" || message.trim() === \"\") {             // проверка обрезанных input-ов на пустое значение с возвратом алерта \r\n    return alert(\"Fill please all fields\");\r\n  }\r\n\r\n  console.log({email:login, message:message});                    // выдача в консоли значений объекта\r\n  form.reset();                                                   // очистка формы после submit\r\n  localStorage.removeItem(LOCAL_KEY);                             // удаление ключа локального хранилища\r\n}\r\n\r\nfunction handleInputData(event) {\r\n    const form = event.target;\r\n    formData[`${event.target.name}`] = event.target.value;      // замена соответствующего поля объекта по таргету\r\n    localStorage.setItem(LOCAL_KEY, JSON.stringify(formData));    // запись объекта в локальное хранилище\r\n  }\r\n\r\nfunction reloadData() {                                                   // первоначальная инициализация полей формы\r\n  formData = JSON.parse(localStorage.getItem(LOCAL_KEY)) || {};   // чтение данных с LocalStorage\r\n  console.log(formData);\r\n  email.value = formData.email || '';                                     // запись данных в поля Input\r\n  message.value = formData.message || '';\r\n}\r\n  \r\nconst LOCAL_KEY = 'feedback-form-state';                          // инициализация ключа\r\n\r\nlet formData = {                                                  // инициализация объекта для работы с LocalStorage\r\n    email: \"\",\r\n    message: \"\",\r\n}\r\n\r\nconst feedbackForm = document.querySelector(\".feedback-form\");    // инициализация объекта формы\r\nconsole.log(\"Step 1\")\r\nfeedbackForm.addEventListener(\"submit\", handleSubmit);            // добавление обработчика submit\r\nfeedbackForm.addEventListener('input', handleInputData);          // добавление обработчика input\r\n\r\nconst { email, message } = feedbackForm.elements;                 // деструктуризируем элементы формы\r\nreloadData();\r\n\r\n\r\n"],"names":["handleSubmit","event","form","login","message","LOCAL_KEY","handleInputData","formData","reloadData","email","feedbackForm"],"mappings":"oDAAA,SAASA,EAAaC,EAAO,CAC3BA,EAAM,eAAc,EACpB,MAAMC,EAAOD,EAAM,cACbE,EAAQD,EAAK,SAAS,MAAM,MAC5BE,EAAUF,EAAK,SAAS,QAAQ,MAEtC,GAAIC,EAAM,SAAW,IAAMC,EAAQ,KAAM,IAAK,GAC5C,OAAO,MAAM,wBAAwB,EAGvC,QAAQ,IAAI,CAAC,MAAMD,EAAO,QAAQC,CAAO,CAAC,EAC1CF,EAAK,MAAK,EACV,aAAa,WAAWG,CAAS,CACnC,CAEA,SAASC,EAAgBL,EAAO,CACfA,EAAM,OACnBM,EAAS,GAAGN,EAAM,OAAO,IAAI,EAAE,EAAIA,EAAM,OAAO,MAChD,aAAa,QAAQI,EAAW,KAAK,UAAUE,CAAQ,CAAC,CACzD,CAEH,SAASC,GAAa,CACpBD,EAAW,KAAK,MAAM,aAAa,QAAQF,CAAS,CAAC,GAAK,GAC1D,QAAQ,IAAIE,CAAQ,EACpBE,EAAM,MAAQF,EAAS,OAAS,GAChCH,EAAQ,MAAQG,EAAS,SAAW,EACtC,CAEA,MAAMF,EAAY,sBAElB,IAAIE,EAAW,CACX,MAAO,GACP,QAAS,EACb,EAEA,MAAMG,EAAe,SAAS,cAAc,gBAAgB,EAC5D,QAAQ,IAAI,QAAQ,EACpBA,EAAa,iBAAiB,SAAUV,CAAY,EACpDU,EAAa,iBAAiB,QAASJ,CAAe,EAEtD,KAAM,CAAE,MAAAG,EAAO,QAAAL,GAAYM,EAAa,SACxCF,EAAY"}